1、所谓的终结方法其实是指finalize()。终结方法finalizer通常是不可预测的，也是很危险的。
   一般情况下是不必要的。使用终结方法会导致行为不稳定，降低性能，以及可移植性问题。根据经验，应避免使用终结方法。

2、finalize()的执行过程
  当对象不可达时，GC会判断该对象是否重写了finalize()方法，如没有重写则直接将其回收，
  否则，若对象未执行过finalize()方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize()方法。
  执行finalize()方法完后，GC会再次判断该对象是否可达，若不可达则进行回收。否则对象“复活”。

3、finalize()的缺点
  在Java中，当一个对象变得不可达到的时候，垃圾回收器会回收与该对象相关联的存储空间，并不需要程序员做专门的工作。
  但Java的垃圾回收机制只负责内存相关清理，其他资源的清理（释放文件、释放DB连接）需要程序员手动完成。

  (1) 终结方法的缺点在于不能保证会及时的执行。
      从一个对象变得不可到达开始，到它的终结方法被执行，所花费的这段时间是任意长的。即注重时间time-critical的任务不应该由finalize()方法来执行。

  (2) 及时的执行finalize()方法时垃圾回收算法的一个主要功能，这种算法在不同的JVM实现中大相径庭。
      如果程序依赖finalize()方法被执行的时间点，那么这个程序的行为在不同的JVM中运行的表现可能会截然不同.
      如一个程序在你测试用的JVM平台运行的很好，而在你的最重要的顾客的JVM平台上却根本无法运行， 这完全有可能.

  (3) Java语言规范不仅不能保证finalize()方法会被及时的执行，而且根本就不保证他们会执行。
      当一个程序终止的时候，某些已经无法访问的对象上的finalize()方法却根本没有被执行，这是完全可能的。结论是：不应该依赖finalize()方法来更新重要的持久状态。
      不要被System.gc和System.runFinalization这两个方法所诱惑，他们确实增加了终结方法被执行的机会，但是他们并不保证终结方法一定会被执行。
      唯一声称保证终结方法被执行的方法是System.runFinalizersOnExit以及其臭名昭著的孪生兄弟Runtime.runFinalizersOnExit，这两个方法都有致命的缺陷，已经被废弃了

  (4) 还有一点，使用finalize()有一个非常严重的Severe性能损失


如果类的对象中封装的资源如文件或者线程确实需要终止，应该如何做而不编写终结方法呢？
只需提供一个显示的终止方法，并要求该类的客户端在每个实例不再有用的时候调用这个方法。
显示终止方法的典型例子是InputStream，OutputStream，java.sql.Connection上的close方法。另一个例子是java.util.Timer

4、finalize()的优点
   (1) 当对象的所有者忘记调用之前建议的显示终止方法时，finalize()可以充当安全网，safety net。虽然这种做并不能保证finalize()会被及时的调用，但是在客户端无法通过调用显示的finalize()来正确结束操作的情况下(希望这种情形尽可能的少发生)，迟一点释放关键资源总比永远不释放要好。如果正考虑编写这样的安全网终结方法，就要考虑清楚这种额外的保护是否值得付出额外的代价。
       显示finalize()模式的实例中所示的四个类FileInputStream,FileOutputStream,Timer和Connection,都具有终结方法。当他们的显示的终止方法未能被调用的情况下，这些finalize()充当了安全网。
       try{
         m.close();//终结方法
       }finally{
         m.finalize();
       }

   (2) finalize()的第二种合理用于与对象的本地对等体native peer有关。
      本地对等体是一个本地对象native object,普通对象通过本地方法native method委托给一个本地对象。
      因为本地对等体不是一个普通对象，所以垃圾回收器不会知道它。当它的Java对等体被回收的时候，它不会被回收。
      在本地对等体并不拥有关键资源的前提下(注是否因为关键资源可被本地其他进程使用)，finalize()正是执行任务的最合适的工具。
      如果本地对等体用于必须被及时终止的资源， 那么该类就应该具有一个显示的终止方法，如前所述。终止方法应该完成所有必要的工作以便释放关键的资源。
      终止方法可以使本地方法或者也可以调用本地方法。

5、使用finalize()的建议
  尽量少用finalize，最好由系统管理，我们可以定义其他的方法来释放非内存资源。
  除非是作为安全网或者是为了终止非关键的本地资源，否则请不要使用终结方法